from snakemake.utils import Paramspace
import numpy as np
import pandas as pd
from itertools import product

include: "rules/common.smk"

VERSIONS, FIPYVERSIONS = glob_wildcards("results/{version,[A-Za-z0-9]+}/{fipyversion,[^/]+}/")
# calculate dimensions that produce six orders of magnitude in number of cells
# SIZES = (10**(np.arange(1, 6.5, 1.)/2)).round().astype(int)**2
SIZES = (10**(np.arange(1, 2.5, 1.)/2)).round().astype(int)**2

# VERSIONS += [versions()]
# FIPYVERSIONS += ["3.4.5+7.g3a4f82063"]

rule versions:
    input:
    output:
    conda:
        "benchmark_analysis"
    log:
        "versions.log"
    shell:
        "git rev-parse --short HEAD > {output} 2> {log}"

rule all:
    input:
        expand("results/{version}/{fipyversion}/nucleation.py",
               zip, version=VERSIONS, fipyversion=FIPYVERSIONS)

rule current_version:
    input:
    output:
        "current_version.txt"
    conda:
        "fipy_solver_benchmarking_311"
    log:
        "current_version.log"
    shell:
        "echo (mkdir -p results/$(git rev-parse --short HEAD)/"
        "$(python -c \"import fipy; print(fipy.__version__)\")) > {output} 2> {log}"
        
rule ipynb2py:
    input:
        "codes/notebooks/{notebook}.ipynb"
    output:
        "{path}/{notebook}.py"
    conda:
        "fipy_solver_benchmarking_311"
    log:
        stdout="{path}/{notebook}.stdout",
        stderr="{path}/{notebook}.stderr"
    shell:
        "jupyter nbconvert {input} --to python --output-dir={wildcards.path} > {log.stdout} 2> {log.stderr}"

checkpoint list_solvers:
    output:
        "results/{path}/{solversuite}/solvers.txt"
    conda:
       "benchmark_{solversuite}"
    log:
        "results/{path}/{solversuite}/solvers.log"
    shell:
        "FIPY_SOLVERS={wildcards.solversuite} python codes/scripts/solvers.py > {output} 2> {log}"

checkpoint list_preconditioners:
    output:
        "results/{path}/{solversuite}/preconditioners.txt"
    conda:
       "benchmark_{solversuite}"
    log:
        "results/{path}/{solversuite}/preconditioners.log"
    shell:
        "FIPY_SOLVERS={wildcards.solversuite} python codes/scripts/preconditioners.py > {output} 2> {log}"

# checkpoint params:
#     output:
#         "results/{path}/{solversuite}/params.csv"
#     input:
#         "results/{path}/{solversuite}/preconditioners.txt",
#         "results/{path}/{solversuite}/solvers.txt",
#     run:
#         s = checkpoints.solvers
#         solve_file = s.get(path=wildcards.path,
#                            solversuite=wildcards.solversuite).output[0]
#         with open(solve_file, 'r') as f:
#             solvers = f.read().split()
# 
#         p = checkpoints.preconditioners
#         precon_file = p.get(path=wildcards.path,
#                             solversuite=wildcards.solversuite).output[0]
#         with open(p.get(path=wildcards.path,
#                         solversuite=wildcards.solversuite).output[0], 'r') as f:
#             preconditioners = f.read().split()
# 
#         df = pd.DataFrame(data=list(product(solvers, preconditioners, SIZES)),
#                           columns=["solver", "preconditioner", "size"])
# 
#         df.to_csv(output[0], index=False)

rule all_solvers:
    output:
        "results/{path}/{solversuite}/all_solvers.csv"
    input:
        "results/{path}/{solversuite}/solvers.txt",
        "results/{path}/{solversuite}/preconditioners.txt",
        get_solvers
    log:
        "results/{path}/{solversuite}/all_solvers.log"
    run:
        try:
            li = [pd.read_csv(fname, index=False) for fname in input]
            df = pd.concat(li, ignore_index=True)
            df.to_csv(output[0], index=False)
        except Exception as e:
            with open(log, 'w') as f:
                f.write(e)

rule all_preconditioners:
    output:
        "results/{path}/{solversuite}/solver~{solver}/all_preconditioners.csv"
    input:
        "results/{path}/{solversuite}/preconditioners.txt",
        get_preconditioners
    log:
        "results/{path}/{solversuite}/solver~{solver}/all_preconditioners.log"
    run:
        try:
            li = [pd.read_csv(fname, index=False) for fname in input]
            df = pd.concat(li, ignore_index=True)
            df.to_csv(output[0], index=False)
        except Exception as e:
            with open(log, 'w') as f:
                f.write(e)

rule all_sizes:
    output:
        "results/{path}/all_sizes.csv"
    input:
        get_sizes
    log:
        "results/{path}/all_sizes.log"
    run:
        try:
            li = [pd.read_csv(fname, index=False) for fname in input]
            df = pd.concat(li, ignore_index=True)
            df.to_csv(output[0], index=False)
        except Exception as e:
            with open(log, 'w') as f:
                f.write(e)

rule extract_times:
    output:
        "results/{path}/{solversuite}/solver~{solver}/preconditioner~{preconditioner}/size~{size}/solver.csv"
    input:
        "results/{path}/{solversuite}/solver~{solver}/preconditioner~{preconditioner}/size~{size}/solver.log"
    conda:
        "benchmark_analysis"
    log:
        "results/{path}/{solversuite}/solver~{solver}/preconditioner~{preconditioner}/size~{size}/solver.log"
    shell:
        "touch {output[0]} 2> {log}"
#     notebook:
#         "codes/notebooks/extract.py.ipynb"

rule solve:
    output:
        "results/{version}/{fipyversion}/{script}/{platform}/{solversuite}/"
        "solver~{solver}/preconditioner~{preconditioner}/size~{size}/solver.log"
    input:
        "results/{version}/{fipyversion}/{script}.py"
    conda:
        "benchmark_{solversuite}"
    log:
        "results/{version}/{fipyversion}/{script}/{platform}/{solversuite}/"
        "solver~{solver}/preconditioner~{preconditioner}/size~{size}/solver.stderr"
    shell:
        "FIPY_SOLVERS={wildcards.solversuite} python {input[0]}"
        " --solver={wildcards.solver}"
        " --preconditioner={wildcards.preconditioner}"
        " --numberOfElements={wildcards.size}"
        " --output=results/{wildcards.version}/{wildcards.fipyversion}/"
        "{wildcards.script}/{wildcards.platform}/{wildcards.solversuite}/"
        "solver~{wildcards.solver}/preconditioner~{wildcards.preconditioner}/"
        "size~{wildcards.size}"
        " 2> {log}"

rule plot:
    output:
        "results/{path}/{solversuite}/all.png"
    input:
        "results/{path}/{solversuite}/params.csv",
        get_params
